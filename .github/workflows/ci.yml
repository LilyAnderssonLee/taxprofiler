# This workflow runs the pipeline with the minimal test dataset to check that it completes without any syntax errors
name: nf-core CI
on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev
      - master
  release:
    types:
      - "published"

env:
  NXF_ANSI_LOG: false
  NFTEST_VER: "0.7.3"

concurrency:
  group: "${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}"
  cancel-in-progress: true

jobs:
  define_nxf_versions:
    name: Choose nextflow versions to test against depending on target branch
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.nxf_versions.outputs.matrix }}
    steps:
      - id: nxf_versions
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.base_ref }}" == "dev" && "${{ matrix.NXF_VER }}" != "latest-everything" ]]; then
            echo matrix='["latest-everything"]' | tee -a $GITHUB_OUTPUT
          else
            echo matrix='["latest-everything", "22.10.1"]' | tee -a $GITHUB_OUTPUT
          fi

  test:
    name: nf-test
    needs: define_nxf_versions
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        NXF_VER: ${{ fromJson(needs.define_nxf_versions.outputs.matrix) }}
        components:
          - "tests/pipeline/test.nf.test --profile test"
          - "tests/pipeline/test_with_complexityfilter_fastp.nf.test --profile test"
          - "tests/pipeline/test_with_complexityfilter_prinseqpluslplus.nf.test --profile test"
          - "tests/pipeline/test_with_preprocessingqc_falco.nf.test --profile test"
          - "tests/pipeline/test_with_shortreadqc_adapterremoval.nf.test --profile test"
          - "tests/pipeline/krakenuniq.nf.test --profile test_krakenuniq"
          - "tests/pipeline/malt.nf.test --profile test_nothing"
        profile:
          - "docker"

    steps:
      - name: Check out pipeline code
        uses: actions/checkout@v3

      - name: Install Nextflow
        uses: nf-core/setup-nextflow@v1
        with:
          version: "${{ matrix.NXF_VER }}"

      - name: Install nf-test
        run: |
          wget -qO- https://code.askimed.com/install/nf-test | bash -s $NFTEST_VER
          sudo mv nf-test /usr/local/bin/

      - name: Run nf-test default
        run: |
          nf-test test ${{ matrix.components }},${{ matrix.profile }} --junitxml=test.xml

      - name: Output log on failure
        if: failure()
        run: |
          sudo apt install bat > /dev/null
          batcat --decorations=always --color=always ${{ github.workspace }}/.nf-test/tests/*/output/pipeline_info/software_versions.yml

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: "*.xml"

  test_motus:
    name: nf-test motus
    needs: define_nxf_versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        NXF_VER: ${{ fromJson(needs.define_nxf_versions.outputs.matrix) }}
        profile:
          - "docker"

    steps:
      - name: Check out pipeline code
        uses: actions/checkout@v3

      - name: Install Nextflow
        uses: nf-core/setup-nextflow@v1
        with:
          version: "${{ matrix.NXF_VER }}"

      - name: Install nf-test
        run: |
          wget -qO- https://code.askimed.com/install/nf-test | bash -s $NFTEST_VER
          sudo mv nf-test /usr/local/bin/

      - name: Prepare the database
        run: |
          wget https://raw.githubusercontent.com/motu-tool/mOTUs/master/motus/downloadDB.py
          python downloadDB.py > download_db_log.txt
          echo 'tool,db_name,db_params,db_path' > 'database_motus.csv'
          echo 'motus,db_mOTU,,db_mOTU' >> 'database_motus.csv'

      - name: Run nf-test motus
        run: |
          nf-test test ${{ matrix.profile }} --profile test_motus,${{ matrix.profile }} --junitxml=test.xml

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: "*.xml"
